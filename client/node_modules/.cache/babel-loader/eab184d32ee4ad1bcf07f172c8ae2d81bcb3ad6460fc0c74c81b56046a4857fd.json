{"ast":null,"code":"import apiClient from './client';\n\n// Upload de vídeo\nexport const uploadVideo = async (file, onProgress) => {\n  const formData = new FormData();\n  formData.append('video', file);\n  return await apiClient.post('/upload/video', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    },\n    onUploadProgress: progressEvent => {\n      if (onProgress) {\n        const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        onProgress(progress);\n      }\n    }\n  });\n};\n\n// Upload de thumbnail\nexport const uploadThumbnail = async (file, onProgress) => {\n  const formData = new FormData();\n  formData.append('thumbnail', file);\n  return await apiClient.post('/upload/thumbnail', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    },\n    onUploadProgress: progressEvent => {\n      if (onProgress) {\n        const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        onProgress(progress);\n      }\n    }\n  });\n};\n\n// Upload múltiplo de vídeos\nexport const uploadMultipleVideos = async (files, onProgress) => {\n  const formData = new FormData();\n  files.forEach(file => {\n    formData.append('videos', file);\n  });\n  return await apiClient.post('/upload/multiple', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    },\n    onUploadProgress: progressEvent => {\n      if (onProgress) {\n        const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        onProgress(progress);\n      }\n    }\n  });\n};\n\n// Deletar arquivo\nexport const deleteFile = async (filename, type = 'video') => {\n  return await apiClient.delete(`/upload/${filename}?type=${type}`);\n};","map":{"version":3,"names":["apiClient","uploadVideo","file","onProgress","formData","FormData","append","post","headers","onUploadProgress","progressEvent","progress","Math","round","loaded","total","uploadThumbnail","uploadMultipleVideos","files","forEach","deleteFile","filename","type","delete"],"sources":["D:/MedalM/client/src/api/upload.js"],"sourcesContent":["import apiClient from './client';\r\n\r\n// Upload de vídeo\r\nexport const uploadVideo = async (file, onProgress) => {\r\n  const formData = new FormData();\r\n  formData.append('video', file);\r\n\r\n  return await apiClient.post('/upload/video', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n    onUploadProgress: (progressEvent) => {\r\n      if (onProgress) {\r\n        const progress = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        );\r\n        onProgress(progress);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\n// Upload de thumbnail\r\nexport const uploadThumbnail = async (file, onProgress) => {\r\n  const formData = new FormData();\r\n  formData.append('thumbnail', file);\r\n\r\n  return await apiClient.post('/upload/thumbnail', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n    onUploadProgress: (progressEvent) => {\r\n      if (onProgress) {\r\n        const progress = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        );\r\n        onProgress(progress);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\n// Upload múltiplo de vídeos\r\nexport const uploadMultipleVideos = async (files, onProgress) => {\r\n  const formData = new FormData();\r\n  files.forEach((file) => {\r\n    formData.append('videos', file);\r\n  });\r\n\r\n  return await apiClient.post('/upload/multiple', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n    onUploadProgress: (progressEvent) => {\r\n      if (onProgress) {\r\n        const progress = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        );\r\n        onProgress(progress);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\n// Deletar arquivo\r\nexport const deleteFile = async (filename, type = 'video') => {\r\n  return await apiClient.delete(`/upload/${filename}?type=${type}`);\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;;AAEhC;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,IAAI,EAAEC,UAAU,KAAK;EACrD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,IAAI,CAAC;EAE9B,OAAO,MAAMF,SAAS,CAACO,IAAI,CAAC,eAAe,EAAEH,QAAQ,EAAE;IACrDI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,gBAAgB,EAAGC,aAAa,IAAK;MACnC,IAAIP,UAAU,EAAE;QACd,MAAMQ,QAAQ,GAAGC,IAAI,CAACC,KAAK,CACxBH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;QACDZ,UAAU,CAACQ,QAAQ,CAAC;MACtB;IACF;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAG,MAAAA,CAAOd,IAAI,EAAEC,UAAU,KAAK;EACzD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEJ,IAAI,CAAC;EAElC,OAAO,MAAMF,SAAS,CAACO,IAAI,CAAC,mBAAmB,EAAEH,QAAQ,EAAE;IACzDI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,gBAAgB,EAAGC,aAAa,IAAK;MACnC,IAAIP,UAAU,EAAE;QACd,MAAMQ,QAAQ,GAAGC,IAAI,CAACC,KAAK,CACxBH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;QACDZ,UAAU,CAACQ,QAAQ,CAAC;MACtB;IACF;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEf,UAAU,KAAK;EAC/D,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/Ba,KAAK,CAACC,OAAO,CAAEjB,IAAI,IAAK;IACtBE,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEJ,IAAI,CAAC;EACjC,CAAC,CAAC;EAEF,OAAO,MAAMF,SAAS,CAACO,IAAI,CAAC,kBAAkB,EAAEH,QAAQ,EAAE;IACxDI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,gBAAgB,EAAGC,aAAa,IAAK;MACnC,IAAIP,UAAU,EAAE;QACd,MAAMQ,QAAQ,GAAGC,IAAI,CAACC,KAAK,CACxBH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;QACDZ,UAAU,CAACQ,QAAQ,CAAC;MACtB;IACF;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,GAAG,OAAO,KAAK;EAC5D,OAAO,MAAMtB,SAAS,CAACuB,MAAM,CAAC,WAAWF,QAAQ,SAASC,IAAI,EAAE,CAAC;AACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}